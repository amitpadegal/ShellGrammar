
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIDENTIFIERleftPIPEARGUMENTS ARGUMENT_LIST ARRAY ARRAY_DECLARATION COMMA COMMAND CUR_LPAREN CUR_RPAREN DO ELSEIF ENDFOR ENDIF EQUALS FOR FUNCTION IDENTIFIER IF IN LIST LPAREN NON_NULL PIPE RPAREN THEN WHITESPACE compound_statementfunction_declaration : IDENTIFIER LPAREN RPAREN CUR_LPAREN CUR_RPARENpipeline : IDENTIFIER PIPE IDENTIFIER array_declaration : IDENTIFIER EQUALS LPAREN RPARENnested_if_statement : IF expression THEN compound_statement ELSEIF expression THEN compound_statement ENDIFexpression : IDENTIFIER\n                          | expression COMMA IDENTIFIER\n\n    for_loop : FOR IDENTIFIER IN list_expression DO compound_statement ENDFORlist_expression : IDENTIFIER\n                      | list_expression COMMA IDENTIFIER\n    '
    
_lr_action_items = {'IDENTIFIER':([0,],[2,]),'$end':([1,6,],[0,-1,]),'LPAREN':([2,],[3,]),'RPAREN':([3,],[4,]),'CUR_LPAREN':([4,],[5,]),'CUR_RPAREN':([5,],[6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'function_declaration':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> function_declaration","S'",1,None,None,None),
  ('function_declaration -> IDENTIFIER LPAREN RPAREN CUR_LPAREN CUR_RPAREN','function_declaration',5,'p_function_declaration','yacc_project.py',12),
  ('pipeline -> IDENTIFIER PIPE IDENTIFIER','pipeline',3,'p_pipeline','yacc_project.py',44),
  ('array_declaration -> IDENTIFIER EQUALS LPAREN RPAREN','array_declaration',4,'p_array_declaration','yacc_project.py',52),
  ('nested_if_statement -> IF expression THEN compound_statement ELSEIF expression THEN compound_statement ENDIF','nested_if_statement',9,'p_nested_if_statement','yacc_project.py',65),
  ('expression -> IDENTIFIER','expression',1,'p_expression','yacc_project.py',80),
  ('expression -> expression COMMA IDENTIFIER','expression',3,'p_expression','yacc_project.py',81),
  ('for_loop -> FOR IDENTIFIER IN list_expression DO compound_statement ENDFOR','for_loop',7,'p_for_loop','yacc_project.py',93),
  ('list_expression -> IDENTIFIER','list_expression',1,'p_list_expression','yacc_project.py',103),
  ('list_expression -> list_expression COMMA IDENTIFIER','list_expression',3,'p_list_expression','yacc_project.py',104),
]
